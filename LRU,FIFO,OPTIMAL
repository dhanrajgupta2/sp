exp 7 : Write a Java Program (using OOP features) to simulate paging simulation using 1. Least Recently Used (LRU) 2. Optimal algorithm


( LRU )

import java.io.*;

class LRU
 {
  public static void main(String args[])throws IOException
   {
    BufferedReader obj=new BufferedReader(new InputStreamReader(System.in));
   int f,page=0,ch,pgf=0,n,chn=0,phit=0;
   boolean flag;
  int pages[]; 	
	int pt=0;
	

int k=0;
	System.out.println("enter no. of frames: ");
	 f=Integer.parseInt(obj.readLine());
	int frame1[]=new int[f];
	int a[]=new int[f];
	int b[]=new int[f];
	for(int i=0;i<f;i++)
		{
		frame1[i]=-1;
		a[i]=-1;
		b[i]=-1;
		}
	System.out.println("enter the no of pages ");
	 n=Integer.parseInt(obj.readLine());
	 pages=new int[n];
	System.out.println("enter the page no ");
	for(int j=0;j<n;j++)
	pages[j]=Integer.parseInt(obj.readLine());
	do{
	int pg=0;
	for(pg=0;pg<n;pg++)
	{
		page=pages[pg];
		flag=true;
		for(int j=0;j<f;j++)
			{
			if(page==frame1[j])
			{flag=false; break;}
			}
	
		for(int j=0;j<f && flag;j++)
			{
			if(frame1[j]==a[f-1])
			{k=j;
			 break;}
			}
	
		if(flag)
		{
		frame1[k]=page;
		System.out.println("frame :" );
		for(int j=0;j<f;j++)
		System.out.print(frame1[j]+"  ");
		pgf++;
		System.out.println();
		}
		else
		{
		System.out.println("frame :" );
		for(int j=0;j<f;j++)
		System.out.print(frame1[j]+"  ");
			System.out.println();
		}
	int p=1;
	b[0]=page;
	for(int j=0;j<a.length;j++)
	{
		if(page!=a[j] && p<f)
		{
		b[p]=a[j];
		p++;
		}
	}
	for(int j=0;j<f;j++)
	{
	a[j]=b[j];
	}
	chn++;
	
	}
	}while(chn!=n);
	phit=n-pgf;
	System.out.println("Page fault:"+pgf);
	System.out.println("Page hit:"+phit);
}
}

( FIFO )

import java.io.*;

class FIFO
 {
  public static void main(String args[])throws IOException
   {
    BufferedReader obj=new BufferedReader(new InputStreamReader(System.in));
   int f,page=0,ch,pgf=0,n,chn=0,phit=0;
   boolean flag;
  int pages[]; 	
	int pt=0;
	
	System.out.println("enter no. of frames: ");
	 f=Integer.parseInt(obj.readLine());
	int frame[]=new int[f];
	for(int i=0;i<f;i++)
		{
		frame[i]=-1;
		}
	System.out.println("enter the no of pages ");
	 n=Integer.parseInt(obj.readLine());
	 pages=new int[n];
	System.out.println("enter the page no ");
	for(int j=0;j<n;j++)
	pages[j]=Integer.parseInt(obj.readLine());
	do{
	int pg=0;
	for(pg=0;pg<n;pg++)
	{
	
	page=pages[pg];
	flag=true;
	for(int j=0;j<f;j++)
	{
	if(page==frame[j])
	{
	flag=false;
	 break;
	}
	}
	if(flag)
	{
	frame[pt]=page;
	pt++;
	if(pt==f)
	pt=0;
	System.out.print("frame :");
	for(int j=0;j<f;j++)
	System.out.print(frame[j]+"   ");

	System.out.println();
	pgf++;
	}
	else
	{
	System.out.print("frame :");
	for(int j=0;j<f;j++)
	System.out.print(frame[j]+"  ");

	System.out.println();
	}
	
	chn++;
	}
	}while(chn!=n);
	phit=n-pgf;
	
	System.out.println("Page fault:"+pgf);
	System.out.println("Page hit:"+phit);
	
	
}
}

( Optimal ) 

import java.io.*;

class optimal{
    public static void main(String args[]) throws IOException {
        BufferedReader obj = new BufferedReader(new InputStreamReader(System.in));
        int f, page = 0, pgf = 0, n, chn = 0;
        boolean flag;
        int pages[];
        int pt = 0;

        System.out.println("Enter the number of frames: ");
        f = Integer.parseInt(obj.readLine());
        int frame[] = new int[f];
        for (int i = 0; i < f; i++) {
            frame[i] = -1;
        }
        System.out.println("Enter the number of pages: ");
        n = Integer.parseInt(obj.readLine());
        pages = new int[n];
        System.out.println("Enter the page numbers: ");
        for (int j = 0; j < n; j++)
            pages[j] = Integer.parseInt(obj.readLine());

        do {
            int pg = 0;
            for (pg = 0; pg < n; pg++) {
                page = pages[pg];
                flag = true;

                // Check if the page is already in a frame
                for (int j = 0; j < f; j++) {
                    if (page == frame[j]) {
                        flag = false;
                        break;
                    }
                }

                // If the page is not found in frames, a page fault occurs
                if (flag) {
                    // Check for an empty frame
                    if (pt < f) {
                        frame[pt] = page;
                        pt++;
                    } else {
                        // If no empty frame, replace the optimal page
                        int farthest = -1;
                        int indexToReplace = -1;
                        for (int j = 0; j < f; j++) {
                            int nextUse = -1;
                            for (int k = pg + 1; k < n; k++) {
                                if (frame[j] == pages[k]) {
                                    nextUse = k;
                                    break;
                                }
                            }
                            // If the page is not found in the future, it can be replaced
                            if (nextUse == -1) {
                                indexToReplace = j;
                                break;
                            }
                            // Find the page that is used farthest in the future
                            if (nextUse > farthest) {
                                farthest = nextUse;
                                indexToReplace = j;
                            }
                        }
                        // Replace the page in the frame
                        frame[indexToReplace] = page;
                    }

                    // Print the current frame state
                    System.out.print("Frame:  ");
                    for (int j = 0; j < f; j++) {
                        System.out.print(frame[j] + "  \t  ");
                    }
                    System.out.println();
                    pgf++;  // Increment page fault count
                } else {
                    // Print the current frame state for hits
                    System.out.print("Frame:  ");
                    for (int j = 0; j < f; j++) {
                        System.out.print(frame[j] + " \t  ");
                    }
                    System.out.println();
                }
                chn++; // Increment total pages processed
            }
        } while (chn != n);

        int phit = n - pgf; // Calculate page hits
        System.out.println("Page fault: " + pgf);
        System.out.println("Page hit: " + phit);
    }
}

